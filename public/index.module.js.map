{
  "version": 3,
  "sources": ["..\\src\\lib\\ericchase\\Utility\\Console.ts", "..\\src\\lib\\ericchase\\Web API\\Node_Utility.ts", "..\\src\\index.module.ts"],
  "sourcesContent": [
    "namespace Console {\n  export let newline_count = 0;\n  export let marks = new Set<{ updated: boolean }>();\n}\n\nfunction updateMarks() {\n  for (const mark of Console.marks) {\n    Console.marks.delete(mark);\n    mark.updated = true;\n  }\n}\n\nexport function GetConsoleMark() {\n  const mark = { updated: false };\n  Console.marks.add(mark);\n  return mark;\n}\n\nexport function ConsoleError(...items: any[]) {\n  // biome-ignore lint: this let's us search for undesired console[error]s\n  console['error'](...items);\n  Console.newline_count = 0;\n  updateMarks();\n}\n\nexport function ConsoleLog(...items: any[]) {\n  // biome-ignore lint: this let's us search for undesired console[log]s\n  console['log'](...items);\n  Console.newline_count = 0;\n  updateMarks();\n}\n\nexport function ConsoleNewline(ensure_count = 1) {\n  for (let i = Console.newline_count; i < ensure_count; i++) {\n    // biome-ignore lint: this let's us search for undesired console[log]s\n    console['log']();\n    Console.newline_count++;\n  }\n  updateMarks();\n}\n\nexport function ConsoleLogToLines(items: Iterable<any>) {\n  for (const item of items) {\n    ConsoleLog(item);\n  }\n}\nexport function ConsoleErrorToLines(items: Iterable<any>) {\n  for (const item of items) {\n    ConsoleError(item);\n  }\n}\n",
    "export class CNodeRef {\n  node: Node;\n\n  constructor(node?: Node | null) {\n    if (node === null) {\n      throw new ReferenceError('Reference is null.');\n    }\n    if (node === undefined) {\n      throw new ReferenceError('Reference is undefined.');\n    }\n    this.node = node;\n  }\n\n  as<T extends abstract new (...args: any) => any>(constructor_ref: T): InstanceType<T> {\n    if (this.node instanceof constructor_ref) return this.node as InstanceType<T>;\n    throw new TypeError(`Reference node is not ${constructor_ref}`);\n  }\n  is<T extends abstract new (...args: any) => any>(constructor_ref: T): boolean {\n    return this.node instanceof constructor_ref;\n  }\n  passAs<T extends abstract new (...args: any) => any>(constructor_ref: T, fn: (reference: InstanceType<T>) => void): void {\n    if (this.node instanceof constructor_ref) {\n      fn(this.node as InstanceType<T>);\n    }\n  }\n  tryAs<T extends abstract new (...args: any) => any>(constructor_ref: T): InstanceType<T> | undefined {\n    if (this.node instanceof constructor_ref) {\n      return this.node as InstanceType<T>;\n    }\n  }\n\n  get classList() {\n    return this.as(HTMLElement).classList;\n  }\n  get className() {\n    return this.as(HTMLElement).className;\n  }\n  get style() {\n    return this.as(HTMLElement).style;\n  }\n\n  getAttribute(qualifiedName: string): string | null {\n    return this.as(HTMLElement).getAttribute(qualifiedName);\n  }\n  setAttribute(qualifiedName: string, value: string): void {\n    this.as(HTMLElement).setAttribute(qualifiedName, value);\n  }\n  getStyleProperty(property: string): string {\n    return this.as(HTMLElement).style.getPropertyValue(property);\n  }\n  setStyleProperty(property: string, value: string | null, priority?: string): void {\n    this.as(HTMLElement).style.setProperty(property, value, priority);\n  }\n}\nexport function NodeRef(node?: Node | null): CNodeRef {\n  return new CNodeRef(node);\n}\n\nexport class CNodeListRef extends Array<CNodeRef> {\n  constructor(nodes?: NodeList | Node[] | null) {\n    if (nodes === null) {\n      throw new ReferenceError('Reference list is null.');\n    }\n    if (nodes === undefined) {\n      throw new ReferenceError('Reference list is undefined.');\n    }\n    super();\n    for (const node of Array.from(nodes)) {\n      try {\n        this.push(new CNodeRef(node));\n      } catch (_) {}\n    }\n  }\n\n  as<T extends abstract new (...args: any) => any>(constructor_ref: T): Array<InstanceType<T>> {\n    return this.filter((ref) => ref.is(constructor_ref)).map((ref) => ref.as(constructor_ref));\n  }\n\n  passEachAs<T extends abstract new (...args: any) => any>(constructor_ref: T, fn: (reference: InstanceType<T>) => void): void {\n    for (const ref of this) {\n      ref.passAs(constructor_ref, fn);\n    }\n  }\n}\nexport function NodeListRef(nodes?: NodeList | Node[] | null): CNodeListRef {\n  return new CNodeListRef(nodes);\n}\n\n// API designed by NOOB (https://github.com/NOOB2868)\nexport function SelectElements(...selectors: string[]) {\n  return NodeListRef(document.querySelectorAll(selectors.join(',')));\n}\n",
    "import { ConsoleError } from './lib/ericchase/Utility/Console.js';\nimport { NodeRef } from './lib/ericchase/Web API/Node_Utility.js';\n\nclass Page {\n  divMessages: HTMLDivElement;\n  constructor() {\n    this.divMessages = NodeRef(document.querySelector('#messages')).as(HTMLDivElement);\n  }\n  addMessage(text: string) {\n    try {\n      const div = document.createElement('div');\n      const pre = document.createElement('pre');\n      pre.textContent = text;\n      div.appendChild(pre);\n      this.divMessages.prepend(div);\n      // scroll div into view\n      div.scrollIntoView(false);\n      return div;\n    } catch (error) {\n      ConsoleError(error);\n    }\n  }\n}\n\nconst page = new Page();\n\n// try {\n//   if (await DatabaseConnected()) {\n//     const tableName = 'test';\n//     const { created, exists } = await EnsureTableExists(tableName);\n//     if (created) {\n//       page.addMessage('Table created.');\n//     } else if (exists) {\n//       page.addMessage('Table exists.');\n//     } else {\n//       page.addMessage('Table creation failed.');\n//     }\n//   }\n// } catch (error: any) {\n//   page.addMessage(error);\n//   page.addMessage('Is server running? Check api endpoint.');\n// }\n"
  ],
  "mappings": ";AAKA,SAAS,WAAW,GAAG;AACrB,aAAW,QAAQ,QAAQ,OAAO;AAChC,YAAQ,MAAM,OAAO,IAAI;AACzB,SAAK,UAAU;AAAA,EACjB;AAAA;AASK,SAAS,YAAY,IAAI,OAAc;AAE5C,UAAQ,SAAS,GAAG,KAAK;AACzB,UAAQ,gBAAgB;AACxB,cAAY;AAAA;AAtBd,IAAU;AAAV,EAAU,YAAV;AACS,EAAI,wBAAgB;AACpB,EAAI,gBAAQ,IAAI;AAAA,GAFf;;;ACsDH,SAAS,OAAO,CAAC,MAA8B;AACpD,SAAO,IAAI,SAAS,IAAI;AAAA;AAvDnB,MAAM,SAAS;AAAA,EACpB;AAAA,EAEA,WAAW,CAAC,MAAoB;AAC9B,QAAI,SAAS,MAAM;AACjB,YAAM,IAAI,eAAe,oBAAoB;AAAA,IAC/C;AACA,QAAI,SAAS,WAAW;AACtB,YAAM,IAAI,eAAe,yBAAyB;AAAA,IACpD;AACA,SAAK,OAAO;AAAA;AAAA,EAGd,EAAgD,CAAC,iBAAqC;AACpF,QAAI,KAAK,gBAAgB;AAAiB,aAAO,KAAK;AACtD,UAAM,IAAI,UAAU,yBAAyB,iBAAiB;AAAA;AAAA,EAEhE,EAAgD,CAAC,iBAA6B;AAC5E,WAAO,KAAK,gBAAgB;AAAA;AAAA,EAE9B,MAAoD,CAAC,iBAAoB,IAAgD;AACvH,QAAI,KAAK,gBAAgB,iBAAiB;AACxC,SAAG,KAAK,IAAuB;AAAA,IACjC;AAAA;AAAA,EAEF,KAAmD,CAAC,iBAAiD;AACnG,QAAI,KAAK,gBAAgB,iBAAiB;AACxC,aAAO,KAAK;AAAA,IACd;AAAA;AAAA,MAGE,SAAS,GAAG;AACd,WAAO,KAAK,GAAG,WAAW,EAAE;AAAA;AAAA,MAE1B,SAAS,GAAG;AACd,WAAO,KAAK,GAAG,WAAW,EAAE;AAAA;AAAA,MAE1B,KAAK,GAAG;AACV,WAAO,KAAK,GAAG,WAAW,EAAE;AAAA;AAAA,EAG9B,YAAY,CAAC,eAAsC;AACjD,WAAO,KAAK,GAAG,WAAW,EAAE,aAAa,aAAa;AAAA;AAAA,EAExD,YAAY,CAAC,eAAuB,OAAqB;AACvD,SAAK,GAAG,WAAW,EAAE,aAAa,eAAe,KAAK;AAAA;AAAA,EAExD,gBAAgB,CAAC,UAA0B;AACzC,WAAO,KAAK,GAAG,WAAW,EAAE,MAAM,iBAAiB,QAAQ;AAAA;AAAA,EAE7D,gBAAgB,CAAC,UAAkB,OAAsB,UAAyB;AAChF,SAAK,GAAG,WAAW,EAAE,MAAM,YAAY,UAAU,OAAO,QAAQ;AAAA;AAEpE;;;AClDA,MAAM,KAAK;AAAA,EACT;AAAA,EACA,WAAW,GAAG;AACZ,SAAK,cAAc,QAAQ,SAAS,cAAc,WAAW,CAAC,EAAE,GAAG,cAAc;AAAA;AAAA,EAEnF,UAAU,CAAC,MAAc;AACvB,QAAI;AACF,YAAM,MAAM,SAAS,cAAc,KAAK;AACxC,YAAM,MAAM,SAAS,cAAc,KAAK;AACxC,UAAI,cAAc;AAClB,UAAI,YAAY,GAAG;AACnB,WAAK,YAAY,QAAQ,GAAG;AAE5B,UAAI,eAAe,KAAK;AACxB,aAAO;AAAA,aACA,OAAP;AACA,mBAAa,KAAK;AAAA;AAAA;AAGxB;AAEA,IAAM,OAAO,IAAI;",
  "debugId": "E810BC6B02F67FC364756E2164756E21",
  "names": []
}