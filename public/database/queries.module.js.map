{
  "version": 3,
  "sources": ["..\\..\\src\\lib\\database-drivers\\dbdriver-localhost.ts", "..\\..\\src\\lib\\ericchase\\Utility\\UpdateMarker.ts", "..\\..\\src\\lib\\ericchase\\Utility\\Console.ts", "..\\..\\src\\dev_server\\server-data.ts", "..\\..\\src\\database\\queries.module.ts"],
  "sourcesContent": [
    "export function getLocalhost(address: string) {\n  return {\n    async query(text: string, params: any[]): Promise<any> {\n      const response = await fetch(`${address}/database/query`, {\n        method: 'POST',\n        body: JSON.stringify({ text, params }),\n      });\n      if (response.status < 200 || response.status > 299) {\n        throw await response.json();\n      }\n      return await response.json();\n    },\n  };\n}\n",
    "export class UpdateMarker<Extra = void> {\n  updated = false;\n  constructor(readonly $manager: UpdateMarkerManager<Extra>) {}\n  reset() {\n    this.$manager.resetMarker(this);\n  }\n}\n\nexport class UpdateMarkerManager<Extra = void> {\n  $marks = new Set<UpdateMarker<Extra>>();\n  extra: Extra;\n  constructor(extra?: Extra extends void ? never : Extra) {\n    this.extra = extra as Extra;\n  }\n  getNewMarker() {\n    const marker = new UpdateMarker(this);\n    this.$marks.add(marker);\n    return marker;\n  }\n  resetMarker(mark: UpdateMarker<Extra>) {\n    mark.updated = false;\n    this.$marks.add(mark);\n  }\n  updateMarkers() {\n    for (const mark of this.$marks) {\n      this.$marks.delete(mark);\n      mark.updated = true;\n    }\n  }\n}\n",
    "import { UpdateMarkerManager } from './UpdateMarker.js';\n\nconst marker_manager = new UpdateMarkerManager<{ newline_count: number }>({ newline_count: 0 });\n\nexport function GetConsoleMarker() {\n  return marker_manager.getNewMarker();\n}\n\nexport function ConsoleError(...items: any[]) {\n  // biome-ignore lint: this let's us search for undesired console[error]s\n  console['error'](...items);\n  marker_manager.extra.newline_count = 0;\n  marker_manager.updateMarkers();\n}\n\nexport function ConsoleErrorWithDate(...items: any[]) {\n  // biome-ignore lint: this let's us search for undesired console[error]s\n  console['error'](`[${new Date().toLocaleTimeString()}]`, ...items);\n  marker_manager.extra.newline_count = 0;\n  marker_manager.updateMarkers();\n}\n\nexport function ConsoleLog(...items: any[]) {\n  // biome-ignore lint: this let's us search for undesired console[log]s\n  console['log'](...items);\n  marker_manager.extra.newline_count = 0;\n  marker_manager.updateMarkers();\n}\n\nexport function ConsoleLogWithDate(...items: any[]) {\n  // biome-ignore lint: this let's us search for undesired console[log]s\n  console['log'](`[${new Date().toLocaleTimeString()}]`, ...items);\n  marker_manager.extra.newline_count = 0;\n  marker_manager.updateMarkers();\n}\n\nexport function ConsoleNewline(ensure_count = 1) {\n  for (let i = marker_manager.extra.newline_count; i < ensure_count; i++) {\n    // biome-ignore lint: this let's us search for undesired console[log]s\n    console['log']();\n    marker_manager.extra.newline_count++;\n  }\n  marker_manager.updateMarkers();\n}\n\nexport function ConsoleLogToLines(items: Iterable<any>) {\n  if (typeof items === 'string') {\n    ConsoleLog(items);\n  } else {\n    for (const item of items) {\n      ConsoleLog(item);\n    }\n  }\n}\n\nexport function ConsoleErrorToLines(items: Iterable<any>) {\n  if (typeof items === 'string') {\n    ConsoleError(items);\n  } else {\n    for (const item of items) {\n      ConsoleError(item);\n    }\n  }\n}\n",
    "const host = '127.0.0.1';\nconst port = '8000';\n\nexport const server_ws = `ws://${host}:${port}`;\nexport const server_http = `http://${host}:${port}`;\n",
    "import { getLocalhost } from '../lib/database-drivers/dbdriver-localhost.js';\nimport { ConsoleError } from '../lib/ericchase/Utility/Console.js';\nimport { server_http } from '../dev_server/server-data.js';\n\n// const db = DatabaseDriver.getNeon(<insert a valid connection string>);\nconst db = getLocalhost(server_http);\n\n//                                                                          \\\\\n//\n// Postgres Queries\n\nexport async function DatabaseConnected(): Promise<boolean> {\n  const q = 'SELECT 1';\n  await db.query(q, []);\n  return true;\n}\n\nexport async function CreateTable(name: string): Promise<void> {\n  const q = `\n      CREATE TABLE ${name} (\n        id SERIAL PRIMARY KEY,\n        name TEXT NOT NULL,\n        email TEXT NOT NULL\n      );\n    `;\n  await db.query(q, []);\n}\nexport async function TableExists(name: string): Promise<boolean> {\n  const q = `\n    SELECT EXISTS (\n      SELECT 1 \n      FROM information_schema.tables \n      WHERE table_schema = 'public' \n      AND table_name = $1\n    );\n  `;\n  const { exists } = (await db.query(q, [name]))[0];\n  return exists ?? false;\n}\n\n//                                                                          \\\\\n//\n// Database Functions\n\nexport async function EnsureTableExists(name: string): Promise<{ created: boolean; exists: boolean }> {\n  try {\n    if ((await TableExists(name)) === true) {\n      return { created: false, exists: true };\n    }\n    await CreateTable(name);\n    if ((await TableExists(name)) === true) {\n      return { created: true, exists: true };\n    }\n  } catch (error) {\n    ConsoleError(error);\n  }\n  return { created: false, exists: false };\n}\n"
  ],
  "mappings": ";AAAO,SAAS,YAAY,CAAC,SAAiB;AAC5C,SAAO;AAAA,SACC,MAAK,CAAC,MAAc,QAA6B;AACrD,YAAM,WAAW,MAAM,MAAM,GAAG,0BAA0B;AAAA,QACxD,QAAQ;AAAA,QACR,MAAM,KAAK,UAAU,EAAE,MAAM,OAAO,CAAC;AAAA,MACvC,CAAC;AACD,UAAI,SAAS,SAAS,OAAO,SAAS,SAAS,KAAK;AAClD,cAAM,MAAM,SAAS,KAAK;AAAA,MAC5B;AACA,aAAO,MAAM,SAAS,KAAK;AAAA;AAAA,EAE/B;AAAA;;;ACZK,MAAM,aAA2B;AAAA,EAEjB;AAAA,EADrB,UAAU;AAAA,EACV,WAAW,CAAU,UAAsC;AAAtC;AAAA;AAAA,EACrB,KAAK,GAAG;AACN,SAAK,SAAS,YAAY,IAAI;AAAA;AAElC;AAEO;AAAA,MAAM,oBAAkC;AAAA,EAC7C,SAAS,IAAI;AAAA,EACb;AAAA,EACA,WAAW,CAAC,OAA4C;AACtD,SAAK,QAAQ;AAAA;AAAA,EAEf,YAAY,GAAG;AACb,UAAM,SAAS,IAAI,aAAa,IAAI;AACpC,SAAK,OAAO,IAAI,MAAM;AACtB,WAAO;AAAA;AAAA,EAET,WAAW,CAAC,MAA2B;AACrC,SAAK,UAAU;AACf,SAAK,OAAO,IAAI,IAAI;AAAA;AAAA,EAEtB,aAAa,GAAG;AACd,eAAW,QAAQ,KAAK,QAAQ;AAC9B,WAAK,OAAO,OAAO,IAAI;AACvB,WAAK,UAAU;AAAA,IACjB;AAAA;AAEJ;;;ACrBO,SAAS,YAAY,IAAI,OAAc;AAE5C,UAAQ,SAAS,GAAG,KAAK;AACzB,iBAAe,MAAM,gBAAgB;AACrC,iBAAe,cAAc;AAAA;AAV/B,IAAM,iBAAiB,IAAI,oBAA+C,EAAE,eAAe,EAAE,CAAC;;;ACF9F,IAAM,OAAO;AACb,IAAM,OAAO;AAEN,IAAM,YAAY,QAAQ,QAAQ;AAClC,IAAM,cAAc,UAAU,QAAQ;;;ACO7C,eAAsB,iBAAiB,GAAqB;AAC1D,QAAM,IAAI;AACV,QAAM,GAAG,MAAM,GAAG,CAAC,CAAC;AACpB,SAAO;AAAA;AAGT,eAAsB,WAAW,CAAC,MAA6B;AAC7D,QAAM,IAAI;AAAA,qBACS;AAAA;AAAA;AAAA;AAAA;AAAA;AAMnB,QAAM,GAAG,MAAM,GAAG,CAAC,CAAC;AAAA;AAEtB,eAAsB,WAAW,CAAC,MAAgC;AAChE,QAAM,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQV,UAAQ,YAAY,MAAM,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG;AAC/C,SAAO,UAAU;AAAA;AAOnB,eAAsB,iBAAiB,CAAC,MAA8D;AACpG,MAAI;AACF,QAAK,MAAM,YAAY,IAAI,MAAO,MAAM;AACtC,aAAO,EAAE,SAAS,OAAO,QAAQ,KAAK;AAAA,IACxC;AACA,UAAM,YAAY,IAAI;AACtB,QAAK,MAAM,YAAY,IAAI,MAAO,MAAM;AACtC,aAAO,EAAE,SAAS,MAAM,QAAQ,KAAK;AAAA,IACvC;AAAA,WACO,OAAP;AACA,iBAAa,KAAK;AAAA;AAEpB,SAAO,EAAE,SAAS,OAAO,QAAQ,MAAM;AAAA;AAnDzC,IAAM,KAAK,aAAa,WAAW;",
  "debugId": "3567FB8F4055408164756E2164756E21",
  "names": []
}